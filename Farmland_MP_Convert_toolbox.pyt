# -*- coding: utf-8 -*-import arcpyimport osimport sysimport multiprocessingimport glob#マルチプロセス対応のモジュールをインポートfrom MP_Farmland_JsonToFeatureClass import exec_batch_convert as exec_batch_json_convertfrom MP_Farmland_ShapefileToFeatureClass import exec_batch_convert as exec_batch_shp_convert#モジュールを変更した場合に即座に反映されないのでreload を追加from importlib import reloadreload(sys.modules["MP_Farmland_JsonToFeatureClass"])reload(sys.modules["MP_Farmland_ShapefileToFeatureClass"])# # ジオプロセシング ツールボックスの定義# - テンプレート#   https://pro.arcgis.com/ja/pro-app/latest/arcpy/geoprocessing_and_python/a-template-for-python-toolboxes.htm# class Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "農地筆ポリゴン変換 サンプルツールボックス"        self.alias = ""        # List of tool classes associated with this toolbox        self.tools = [AgrilandJsonConvTool, AgrilandShpConvTool]# # 各ジオプロセシング ツールの定義# class AgrilandShpConvTool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "02_マルチプロセスサンプル_農地筆ポリゴン（シェープファイル形式）_変換ツール"        self.description = ""    def getParameterInfo(self):        """Define the tool parameters."""        #param0 入力フォルダー（解凍後の都道府県単位のフォルダー）        #param1 出力フォルダー（処理用テンポラリの市区町村FGDBと最終の都道府県FGDBの保存先：基本的に空のフォルダーを指定）        #param2 並列処理で使うプロセス数（市区町村ごとのフィーチャクラスへの変換で利用）        param0 = arcpy.Parameter(            displayName="入力フォルダー（解凍後の都道府県フォルダー）",            name="input_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        param1 = arcpy.Parameter(            displayName="出力フォルダー（都道府県のFGDBの保存先：空のフォルダーを指定してください）",            name="out_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        param2 = arcpy.Parameter(            displayName="並列処理プロセス数",            name="cpu_num",            datatype="GPLong",            parameterType="Optional",            direction="Input")        #cpu コアの半分をデフォルトとして設定する        param2.filter.type = "ValueList"        cpu_cnt = multiprocessing.cpu_count()-1 #念のため1マイナス        param2.filter.list = [i for i in range(1, cpu_cnt)]        param2.value = int(cpu_cnt/2)        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        #入力フォルダーのチェック        if parameters[0].value:            infolder = parameters[0].valueAsText            shape_files = glob.glob(infolder + "/*/*.shp") # フルパスのリスト            if len(shape_files) == 0:                parameters[0].setErrorMessage(u"シェープファイル がサブフォルダーに含まれているフォルダーを指定してください。")        #出力フォルダーのチェック        if parameters[1].value:            outfolder = parameters[1].valueAsText            if len(os.listdir(outfolder)) > 0:                parameters[1].setErrorMessage(u"空のフォルダーを指定してください。")        return    def execute(self, parameters, messages):        """The source code of the tool."""        infolder = parameters[0].valueAsText        outfolder = parameters[1].valueAsText        cpu_cnt = int(parameters[2].valueAsText)        exec_batch_shp_convert(infolder, outfolder, cpu_cnt)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass AgrilandJsonConvTool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "01_マルチプロセスサンプル_農地筆ポリゴン（GeoJSON形式）_変換ツール"        self.description = ""    def getParameterInfo(self):        """Define the tool parameters."""        #param0 入力フォルダー（解凍後の都道府県単位のフォルダー）        #param1 出力フォルダー（処理用テンポラリの市区町村FGDBと最終の都道府県FGDBの保存先：基本的に空のフォルダーを指定）        #param2 並列処理で使うプロセス数（市区町村ごとのフィーチャクラスへの変換で利用）        param0 = arcpy.Parameter(            displayName="入力フォルダー（解凍後の都道府県フォルダー）",            name="input_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        param1 = arcpy.Parameter(            displayName="出力フォルダー（都道府県のFGDBの保存先：空のフォルダーを指定してください）",            name="out_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        param2 = arcpy.Parameter(            displayName="並列処理プロセス数",            name="cpu_num",            datatype="GPLong",            parameterType="Optional",            direction="Input")        #cpu コアの半分をデフォルトとして設定する        param2.filter.type = "ValueList"        cpu_cnt = multiprocessing.cpu_count()-1 #念のため1マイナス        param2.filter.list = [i for i in range(1, cpu_cnt)]        param2.value = int(cpu_cnt/2)        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        #入力フォルダーのチェック        if parameters[0].value:            infolder = parameters[0].valueAsText            json_files = glob.glob(infolder + "/*.json") # フルパスのリスト            if len(json_files) == 0:                parameters[0].setErrorMessage(u"*.json のファイルが含まれているフォルダーを指定してください。")        #出力フォルダーのチェック        if parameters[1].value:            outfolder = parameters[1].valueAsText            if len(os.listdir(outfolder)) > 0:                parameters[1].setErrorMessage(u"空のフォルダーを指定してください。")        return    def execute(self, parameters, messages):        """The source code of the tool."""        infolder = parameters[0].valueAsText        outfolder = parameters[1].valueAsText        cpu_cnt = int(parameters[2].valueAsText)        exec_batch_json_convert(infolder, outfolder, cpu_cnt)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return